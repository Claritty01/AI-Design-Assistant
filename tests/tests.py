# tests/tests.py

import pytest
#–ø—Ä–∏–º–µ—Ä –ø—É—Ç–µ–π –¥–æ —Ñ–∞–π–ª–æ–≤
#from ai_design_assistant.ui.main_window import MainWindow

import os
from pathlib import Path

from ai_design_assistant.core.image_utils import image_to_base64, remove_background, apply_upscale
from ai_design_assistant.core.chat import ChatSession
from ai_design_assistant.core.plugins import get_plugin_manager


BASE = Path(__file__).parent

# üîπ –¢–µ—Å—Ç 1: base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def test_image_to_base64():
    result = image_to_base64(BASE / "sample.png")
    assert isinstance(result, str) and result.startswith("data:image/"), "Base64 –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"


# üîπ –¢–µ—Å—Ç 2: —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
def test_remove_background():
    result_path = remove_background(BASE / "sample.png")
    assert Path(result_path).exists(), "–§–æ–Ω –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω"


# üîπ –¢–µ—Å—Ç 3: –∞–ø—Å–∫–µ–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def test_apply_upscale():
    result_path = apply_upscale(BASE / "sample.png")
    path = Path(result_path)
    print("Upscale result:", result_path)

    # –î–æ–ø—É—Å—Ç–∏–º –æ–±–∞ –ø—É—Ç–∏: realesrgan –∏–ª–∏ PIL
    assert path.exists() or path.with_stem(path.stem + "_pil").exists(), "Upscale –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"



# üîπ –¢–µ—Å—Ç 4: —Å–æ–∑–¥–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞
def test_chat_save_load():
    session = ChatSession.create_new()
    session.add_message("user", "–ü—Ä–∏–≤–µ—Ç!")
    session.save()

    restored = ChatSession.load(session._path)
    assert restored.messages[0].content == "–ü—Ä–∏–≤–µ—Ç!", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"


# üîπ –¢–µ—Å—Ç 5: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ –∑–∞–ø—É—Å–∫ remove_bg
def test_plugins_list_and_run():
    manager = get_plugin_manager()
    available = manager.names
    assert "remove_bg_plugin" in available, "–ü–ª–∞–≥–∏–Ω 'remove_bg_plugin' –Ω–µ –Ω–∞–π–¥–µ–Ω"

    plugin = manager.get("remove_bg_plugin")
    result_path = plugin.run(image_path=BASE / "sample.png")
    assert Path(result_path).exists(), "–ü–ª–∞–≥–∏–Ω remove_bg_plugin –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"



import base64

def test_base64_roundtrip():
    encoded = image_to_base64(BASE / "sample.png")
    assert encoded.startswith("data:image/"), "–ú–µ—Ç–∫–∞ MIME –Ω–µ–≤–µ—Ä–Ω–∞"

    # –û—Ç—Ä–µ–∂–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
    header, data = encoded.split(",", 1)
    decoded = base64.b64decode(data)

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ
    tmp_path = BASE / "decoded_output.png"
    tmp_path.write_bytes(decoded)
    assert tmp_path.exists() and tmp_path.stat().st_size > 0, "base64-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

def test_empty_chat_save_load():
    session = ChatSession.create_new()
    session.save()
    loaded = ChatSession.load(session._path)
    assert loaded.messages == [], "–ü—É—Å—Ç–æ–π —á–∞—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∫–∞–∫ –ø—É—Å—Ç–æ–π"

def test_plugin_reusability():
    plugin = get_plugin_manager().get("remove_bg_plugin")
    result1 = plugin.run(image_path=BASE / "sample.png")
    result2 = plugin.run(image_path=BASE / "sample.png")
    assert Path(result1).exists() and Path(result2).exists(), "–ü–ª–∞–≥–∏–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ"


def test_remove_background_missing_file():
    with pytest.raises(FileNotFoundError):
        remove_background(BASE / "not_existing_file.png")

def test_plugins_presence():
    names = get_plugin_manager().names
    for expected in ["remove_bg_plugin", "upscale_plugin"]:
        assert expected in names, f"–ü–ª–∞–≥–∏–Ω '{expected}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
