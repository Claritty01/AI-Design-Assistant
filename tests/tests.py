# tests/tests.py

import pytest
#–ø—Ä–∏–º–µ—Ä –ø—É—Ç–µ–π –¥–æ —Ñ–∞–π–ª–æ–≤
#from ai_design_assistant.ui.main_window import MainWindow

import os
from pathlib import Path

from ai_design_assistant.core.image_utils import image_to_base64, remove_background, apply_upscale
from ai_design_assistant.core.chat import ChatSession
from ai_design_assistant.core.plugins import get_plugin_manager


BASE = Path(__file__).parent

# üîπ –¢–µ—Å—Ç 1: base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def test_image_to_base64():
    result = image_to_base64(BASE / "sample.png")
    assert isinstance(result, str) and result.startswith("data:image/"), "Base64 –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"


# üîπ –¢–µ—Å—Ç 2: —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
def test_remove_background():
    result_path = remove_background(BASE / "sample.png")
    assert Path(result_path).exists(), "–§–æ–Ω –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω"


# üîπ –¢–µ—Å—Ç 3: –∞–ø—Å–∫–µ–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def test_apply_upscale():
    result_path = apply_upscale(BASE / "sample.png")
    path = Path(result_path)
    print("Upscale result:", result_path)

    # –î–æ–ø—É—Å—Ç–∏–º –æ–±–∞ –ø—É—Ç–∏: realesrgan –∏–ª–∏ PIL
    assert path.exists() or path.with_stem(path.stem + "_pil").exists(), "Upscale –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"



# üîπ –¢–µ—Å—Ç 4: —Å–æ–∑–¥–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞
def test_chat_save_load():
    session = ChatSession.create_new()
    session.add_message("user", "–ü—Ä–∏–≤–µ—Ç!")
    session.save()

    restored = ChatSession.load(session._path)
    assert restored.messages[0].content == "–ü—Ä–∏–≤–µ—Ç!", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"


# üîπ –¢–µ—Å—Ç 5: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ –∑–∞–ø—É—Å–∫ remove_bg
def test_plugins_list_and_run():
    manager = get_plugin_manager()
    available = manager.names
    assert "remove_bg_plugin" in available, "–ü–ª–∞–≥–∏–Ω 'remove_bg_plugin' –Ω–µ –Ω–∞–π–¥–µ–Ω"

    plugin = manager.get("remove_bg_plugin")
    result_path = plugin.run(image_path=BASE / "sample.png")
    assert Path(result_path).exists(), "–ü–ª–∞–≥–∏–Ω remove_bg_plugin –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"



import base64

def test_base64_roundtrip():
    encoded = image_to_base64(BASE / "sample.png")
    assert encoded.startswith("data:image/"), "–ú–µ—Ç–∫–∞ MIME –Ω–µ–≤–µ—Ä–Ω–∞"

    # –û—Ç—Ä–µ–∂–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
    header, data = encoded.split(",", 1)
    decoded = base64.b64decode(data)

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ
    tmp_path = BASE / "decoded_output.png"
    tmp_path.write_bytes(decoded)
    assert tmp_path.exists() and tmp_path.stat().st_size > 0, "base64-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

def test_empty_chat_save_load():
    session = ChatSession.create_new()
    session.save()
    loaded = ChatSession.load(session._path)
    assert loaded.messages == [], "–ü—É—Å—Ç–æ–π —á–∞—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∫–∞–∫ –ø—É—Å—Ç–æ–π"

def test_plugin_reusability():
    plugin = get_plugin_manager().get("remove_bg_plugin")
    result1 = plugin.run(image_path=BASE / "sample.png")
    result2 = plugin.run(image_path=BASE / "sample.png")
    assert Path(result1).exists() and Path(result2).exists(), "–ü–ª–∞–≥–∏–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ"


def test_remove_background_missing_file():
    with pytest.raises(FileNotFoundError):
        remove_background(BASE / "not_existing_file.png")

def test_plugins_presence():
    names = get_plugin_manager().names
    for expected in ["remove_bg_plugin", "upscale_plugin"]:
        assert expected in names, f"–ü–ª–∞–≥–∏–Ω '{expected}' –Ω–µ –Ω–∞–π–¥–µ–Ω"


# –¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def test_multiple_messages_in_chat():
    session = ChatSession.create_new()
    session.add_message("user", "–ü—Ä–∏–≤–µ—Ç!")
    session.add_message("assistant", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!")
    session.save()

    loaded = ChatSession.load(session._path)
    assert len(loaded.messages) == 2, "–ß–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2 —Å–æ–æ–±—â–µ–Ω–∏—è"
    assert loaded.messages[1].role == "assistant", "–†–æ–ª—å –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è"


# –¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ UUID —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤
def test_chat_uuid_uniqueness():
    session1 = ChatSession.create_new()
    session2 = ChatSession.create_new()
    assert session1.uuid != session2.uuid, "UUID —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç!"


# –¢–µ—Å—Ç 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è PIL –∞–ø—Å–∫–µ–π–ª–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ RealESRGAN
from PIL import Image
def test_upscale_fallback_to_pil(monkeypatch, tmp_path):
    # –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–Ω–µ—à–Ω–µ–π —É—Ç–∏–ª–∏—Ç—ã
    monkeypatch.setattr("ai_design_assistant.core.image_utils.subprocess.run",
                        lambda *a, **kw: (_ for _ in ()).throw(FileNotFoundError()))

    src_image = BASE / "sample.png"
    result_path = apply_upscale(src_image)
    path = Path(result_path)

    assert path.exists(), "–§–∞–π–ª –ø–æ—Å–ª–µ PIL-–∞–ø—Å–∫–µ–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–∏–ª—Å—è –≤ 2 —Ä–∞–∑–∞
    img = Image.open(path)
    orig = Image.open(src_image)

    expected_size = (orig.width * 2, orig.height * 2)
    assert img.size == expected_size, f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ PIL-–∞–ø—Å–∫–µ–π–ª–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π: {img.size}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_size}"


# –¢–µ—Å—Ç 14: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
def test_temporary_image_removal(tmp_path):
    src = BASE / "sample.png"
    result_path = remove_background(src)
    assert Path(result_path).exists(), "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    Path(result_path).unlink()
    assert not Path(result_path).exists(), "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å"


# –¢–µ—Å—Ç 15: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ base64 —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
def test_valid_base64_decode():
    encoded = image_to_base64(BASE / "sample.png")
    header, data = encoded.split(",", 1)
    decoded = base64.b64decode(data)
    assert len(decoded) > 10, "–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞"


# –¢–µ—Å—Ç 16: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø–ª–∞–≥–∏–Ω–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ñ–∞–π–ª–µ
def test_plugin_fail_on_invalid_file():
    plugin = get_plugin_manager().get("remove_bg_plugin")
    with pytest.raises(Exception):
        plugin.run(image_path=BASE / "not_existing_file.png")


# –¢–µ—Å—Ç 17: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def test_chat_save_load_integrity():
    session = ChatSession.create_new()
    session.add_message("user", "–ö–∞–∫ –¥–µ–ª–∞?")
    session.save()

    loaded = ChatSession.load(session._path)
    reloaded = ChatSession.load(session._path)
    assert loaded.uuid == reloaded.uuid, "UUID –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è"
    assert loaded.messages[0].content == reloaded.messages[0].content, "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è!"


# –¢–µ—Å—Ç 18: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–ª–∞–≥–∏–Ω–∞ upscale
def test_upscale_plugin_presence():
    names = get_plugin_manager().names
    assert "upscale_plugin" in names, "–ü–ª–∞–≥–∏–Ω 'upscale_plugin' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"


# –¢–µ—Å—Ç 19: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ upscale_plugin
def test_upscale_plugin_run():
    plugin = get_plugin_manager().get("upscale_plugin")
    result_path = plugin.run(image_path=BASE / "sample.png")
    assert Path(result_path).exists(), "–ü–ª–∞–≥–∏–Ω upscale_plugin –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª"


# –¢–µ—Å—Ç 20: –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME —Ç–∏–ø–∞ base64
def test_base64_mime_type():
    encoded = image_to_base64(BASE / "sample.png")
    header = encoded.split(",", 1)[0]
    assert "image" in header, "Base64 MIME header –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'image'"

