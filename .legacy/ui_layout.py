from __future__ import annotations

from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QPushButton,
    QLineEdit,
    QLabel,
    QFileDialog,
    QListWidget,
    QListWidgetItem,
    QDialog,
    QMessageBox, QScrollArea, QToolButton, QSplitter, QSizePolicy
)
from PyQt5.QtWidgets import QComboBox
from ai_design_assistant.core.models import get_current_model, set_current_model, list_models
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QSize, QTimer, QEvent
from PyQt5.QtGui import QFont, QPixmap, QIcon
import os
import shutil
from pathlib import Path

from ai_design_assistant.core.logger import get_logger
from ai_design_assistant.core.models import stream_chat_response
from ai_design_assistant.core.settings import load_settings, save_settings
from ai_design_assistant.core.chat import ChatSession
from ai_design_assistant.core.chat import load_chats, create_new_chat
from ai_design_assistant.core.plugins import get_plugins

from settings_dialog import SettingsDialog   # <‚Äî –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from ai_design_assistant.core.settings import AppSettings             # <‚Äî –Ω—É–∂–µ–Ω –¥–ª—è apply_theme




log = get_logger("ui")


USER_AVA = "icons/user.png"
AI_AVA   = "icons/ai.png"


def list_chat_images(chat_json_name: str) -> list[str]:
    """–í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º, —Ö—Ä–∞–Ω—è—â–∏–º—Å—è –≤ –ø–∞–ø–∫–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
    folder = Path("../chat_data") / chat_json_name.replace(".json", "")
    exts = ("*.png", "*.jpg", "*.jpeg", "*.bmp")
    paths: list[str] = []
    for p in exts:
        paths.extend(map(str, folder.glob(p)))
    paths.sort()
    return paths

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Background stream worker
# -----------------------------------------------------------------------------

class StreamWorker(QThread):
    token_received = pyqtSignal(str)
    finished = pyqtSignal()

    def __init__(self, user_text: str, image_path: str | None = None):
        super().__init__()
        self.user_text = user_text
        self.image_path = image_path

    def run(self):
        try:
            for token, _ in stream_chat_response(self.user_text, image_path=self.image_path):
                self.token_received.emit(token)
        except Exception as exc:
            log.exception("StreamWorker failed")
            self.token_received.emit(f"\n[–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞: {exc}]")
        self.finished.emit()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Bubble widget ala Silly Tavern
# ---------------------------------------------------------------------------
class MessageBubble(QWidget):
    def __init__(self, text: str, role: str, avatar: QPixmap | None = None):
        super().__init__()

        # 1) –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ª—ç–π–∞—É—Ç
        main = QVBoxLayout(self)
        main.setSpacing(4)
        main.setContentsMargins(6, 6, 6, 6)

        user_side = (role == "user")

        # 2) –°–æ–∑–¥–∞—ë–º QLabel –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å—Ä–∞–∑—É, –¥–æ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
        self.txt = QLabel(text)
        self.txt.setWordWrap(True)
        self.txt.setMaximumWidth(480)
        self.txt.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        self.txt.setProperty("bubbleRole", role)

        # 3) –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –∞–≤–∞—Ç–∞—Ä + –ø—É–∑—ã—Ä—å + —Å–ø–µ–π—Å–µ—Ä
        top = QHBoxLayout()
        top.setSpacing(6)

        # –∞–≤–∞—Ç–∞—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if avatar:
            ava_lbl = QLabel()
            ava_lbl.setPixmap(avatar.scaled(36, 36, Qt.KeepAspectRatio, Qt.SmoothTransformation))

        # ¬´–≥—É–±–∫–∞¬ª –¥–ª—è –ø—Ä–∏–∂–∞—Ç–∏—è
        spacer = QWidget()
        spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)

        if user_side:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [spacer][txt][avatar?]
            top.addWidget(spacer)
            top.addWidget(self.txt)
            if avatar:
                top.addWidget(ava_lbl)
        else:
            # –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: [avatar?][txt][spacer]
            if avatar:
                top.addWidget(ava_lbl)
            top.addWidget(self.txt)
            top.addWidget(spacer)

        main.addLayout(top)

        # 4) –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–æ–Ω–∞ –ø–æ–¥ –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.copy_bar = QWidget()
        self.copy_bar.setFixedHeight(24)
        copy_layout = QHBoxLayout(self.copy_bar)
        copy_layout.setContentsMargins(0, 0, 0, 0)
        copy_layout.addStretch()
        copy_btn = QToolButton()
        copy_btn.setText("üìã")
        copy_btn.clicked.connect(self.copy_text)
        copy_layout.addWidget(copy_btn)
        self.copy_bar.hide()
        main.addWidget(self.copy_bar)

        # 5) –í–∫–ª—é—á–∞–µ–º Hover-—Å–æ–±—ã—Ç–∏—è
        self.setAttribute(Qt.WA_Hover)

    def copy_text(self):
        QApplication.clipboard().setText(self.txt.text())

    # –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, –ø—É—Å—Ç—å –ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã—Ç–∞ –∫–Ω–æ–ø–∫–∞
    def event(self, e):
        if e.type() == QEvent.HoverEnter:
            self.copy_bar.hide()
        elif e.type() == QEvent.HoverLeave:
            self.copy_bar.hide()
        return super().event(e)





# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Main Chat Window
# -----------------------------------------------------------------------------

class ChatWindow(QMainWindow):
    THUMB_SIZE = QSize(80, 80)

    def __init__(self):
        super().__init__()
        self.current_chat = create_new_chat()
        set_current_chat(os.path.join("../chat_data", self.current_chat["file"]))

        self.chat_history = load_history()
        self.settings = load_settings()
        self.current_theme = self.settings.get("theme", "dark").lower()

        self.image_path: str | None = None  # last uploaded image (for sending)
        self.reply_buffer: str = ""
        self.selected_gallery_image: str | None = None

        self.setWindowTitle("–ò–ò‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–∏–∑–∞–π–Ω–∞")
        self.setMinimumSize(1100, 700)

        self.build_ui()
        self.apply_theme()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # UI build helpers
    # -------------------------------------------------------

    def build_ui(self):
        # –ª–µ–≤—ã–µ / —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ / –ø—Ä–∞–≤—ã–µ –ø–∞–Ω–µ–ª–∏
        sidebar_left = self.build_left_sidebar()
        chat_widget = self.build_chat_area()
        sidebar_right = self.build_right_sidebar()
        splitter = QSplitter(Qt.Horizontal)
        splitter.addWidget(sidebar_left)
        splitter.addWidget(chat_widget)
        splitter.addWidget(sidebar_right)
        splitter.setStretchFactor(1, 3)  # —Ü–µ–Ω—Ç—Ä —Ç—è–Ω–µ—Ç—Å—è –±–æ–ª—å—à–µ

        self.setCentralWidget(splitter)

    def build_left_sidebar(self) -> QWidget:
        vbox = QVBoxLayout()
        app_title = QLabel("üé® –ò–ò‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        app_title.setFont(QFont("Arial", 18, QFont.Bold))
        vbox.addWidget(app_title)

        self.chat_list_widget = QListWidget()
        self.chat_list_widget.itemClicked.connect(self.handle_chat_selection)
        vbox.addWidget(QLabel("üí¨ –î–∏–∞–ª–æ–≥–∏"))
        vbox.addWidget(self.chat_list_widget)
        self.refresh_chat_list()

        settings_btn = QPushButton("‚öôÔ∏è‚ÄØ–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚Ä¶")
        settings_btn.clicked.connect(self.open_settings)
        vbox.addWidget(settings_btn)

        new_btn = QPushButton("‚ûï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
        new_btn.clicked.connect(self.create_and_switch_chat)
        vbox.addWidget(new_btn)

        theme_btn = QPushButton("üåì –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É")
        theme_btn.clicked.connect(self.toggle_theme)
        vbox.addWidget(theme_btn)

        # ‚îÄ‚îÄ‚îÄ –≤—ã–±–æ—Ä LLM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        h_model = QHBoxLayout()
        h_model.addWidget(QLabel("üß† –ú–æ–¥–µ–ª—å"))
        self.cmb_model = QComboBox()
        self.cmb_model.addItems(list_models())
        self.cmb_model.setCurrentText(get_current_model())
        self.cmb_model.currentTextChanged.connect(self.on_model_changed)
        h_model.addWidget(self.cmb_model)
        vbox.addLayout(h_model)

        vbox.addStretch()
        w = QWidget(); w.setLayout(vbox); return w

    def build_chat_area(self) -> QWidget:
        # ---------- –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å –ø—É–∑—ã—Ä—è–º–∏ ----------
        self.scroll = QScrollArea()
        self.scroll.setWidgetResizable(True)

        self.chat_container = QWidget()
        self.chat_layout = QVBoxLayout(self.chat_container)
        self.chat_layout.setSpacing(4)
        self.chat_layout.addStretch()  # —á—Ç–æ–±—ã –≤—Å—ë –ª–∏–ø–ª–æ –≤–≤–µ—Ä—Ö

        self.scroll.setWidget(self.chat_container)

        # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –∏—Å—Ç–æ—Ä–∏—é
        for msg in self.chat_history:
            self._add_bubble(msg["role"], msg["content"], avatar_path=None)

        self.spinner_label = QLabel("üí¨ –ò–ò –Ω–∞–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç‚Ä¶")
        self.spinner_label.setStyleSheet("color: gray;")
        self.spinner_label.setVisible(False)

        # ---------- –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ ----------
        self.input_field = QLineEdit();
        self.input_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶")
        self.input_field.setMinimumHeight(40)
        self.input_field.setStyleSheet("padding-left:6px; font-size:14px;")

        self.upload_button = QPushButton("üìé");
        self.upload_button.setFixedSize(40, 40);
        self.upload_button.clicked.connect(self.upload_image)
        self.send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å");
        self.send_button.setMinimumHeight(40);
        self.send_button.setStyleSheet("font-size:14px;")
        self.send_button.clicked.connect(self.send_message)

        input_row = QHBoxLayout()
        input_row.addWidget(self.input_field, 1)
        input_row.addWidget(self.upload_button)
        input_row.addWidget(self.send_button)

        # ---------- —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ ----------
        vbox = QVBoxLayout()
        vbox.addWidget(self.spinner_label)
        vbox.addWidget(self.scroll, 1)  # —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º
        vbox.addLayout(input_row, 0)

        wrapper = QWidget();
        wrapper.setLayout(vbox)
        return wrapper

    def build_right_sidebar(self) -> QWidget:
        vbox = QVBoxLayout()
        vbox.addWidget(QLabel("üß© –ü–ª–∞–≥–∏–Ω—ã"))

        self.plugins = get_plugins()  # ‚Üê —Å–ª–æ–≤–∞—Ä—å {name: module}

        for name, plugin in self.plugins.items():
            btn = QPushButton(name)
            btn.clicked.connect(lambda _, p=plugin: self.run_plugin(p))
            vbox.addWidget(btn)


        vbox.addWidget(QLabel("üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è"))
        self.gallery = QListWidget(); self.gallery.setIconSize(self.THUMB_SIZE); self.gallery.itemClicked.connect(self.select_gallery_item)
        vbox.addWidget(self.gallery, 1)
        self.refresh_gallery()

        vbox.addStretch(); w = QWidget(); w.setLayout(vbox); return w



    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Chat / history helpers
    # -------------------------------------------------------



    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Message sending
    # -------------------------------------------------------

    def send_message(self):
        user_text = self.input_field.text().strip()
        if not user_text and not self.image_path:
            return

        # record last image (if none newly picked, re‚Äëuse last from history)
        if not self.image_path:
            for m in reversed(self.chat_history):
                if m.get("role") == "user" and "image" in m:
                    self.image_path = m["image"]; break

        # display user prompt
        self._add_bubble("user", user_text or "[–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]")
        self.current_bubble = self._add_bubble("assistant", "")  # –ø—É—Å—Ç–æ–π, –±—É–¥–µ–º –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å
        self.spinner_label.setVisible(True)

        self.last_user_text = user_text; self.last_user_image = self.image_path

        self.worker = StreamWorker(user_text, image_path=self.image_path)
        self.worker.token_received.connect(self.append_streamed_token)
        self.worker.finished.connect(self.on_stream_finished)
        self.worker.start()

        self.input_field.clear(); self.image_path = None; self.reply_buffer = ""; self.refresh_gallery()

    # stream callbacks
    def append_streamed_token(self, token: str):
        self.reply_buffer += token
        self.current_bubble.txt.setText(self.reply_buffer)
        self.current_bubble.txt.adjustSize()  # –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å QLabel
        self.current_bubble.adjustSize()  # –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤–µ—Å—å –ø—É–∑—ã—Ä—å
        self.chat_layout.invalidate()  # –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å layout

        QApplication.processEvents()

    def on_stream_finished(self):
        self.spinner_label.setVisible(False)
        append_message(self.chat_history, "user", self.last_user_text, image=self.last_user_image)
        append_message(self.chat_history, "assistant", self.reply_buffer)
        save_history(self.chat_history)


    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Gallery functionality
    # -------------------------------------------------------


    def refresh_gallery(self):
        self.gallery.clear()
        for path in list_chat_images(self.current_chat["file"]):
            if not os.path.exists(path):
                continue
            icon = QIcon(QPixmap(path).scaled(self.THUMB_SIZE, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            item = QListWidgetItem(icon, "")
            item.setData(Qt.UserRole, path)
            self.gallery.addItem(item)

    def select_gallery_item(self, item: QListWidgetItem):
        self.selected_gallery_image = item.data(Qt.UserRole)
        # highlight selection handled automatically by QListWidget

    # module actions from sidebar (operate on selected image)
    def _require_selection(self) -> str | None:
        if not self.selected_gallery_image:
            QMessageBox.information(self, "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥–∞–ª–µ—Ä–µ–µ.")
            return None
        return self.selected_gallery_image

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Image upload
    # -------------------------------------------------------

    def upload_image(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "", "Images (*.png *.jpg *.jpeg *.bmp)")
        if not file_path:
            return
        chat_folder = Path("../chat_data") / self.current_chat["file"].replace(".json", "")
        chat_folder.mkdir(parents=True, exist_ok=True)
        img_idx = len([m for m in self.chat_history if "image" in m]) + 1
        dest = chat_folder / f"image_{img_idx}{Path(file_path).suffix}"
        shutil.copy(file_path, dest)
        self.image_path = str(dest)
        html_img = f'<img src="{self.image_path}" width="300">'
        self._add_bubble("user", html_img)
        self.refresh_gallery()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Theme + chat management (unchanged vs previous)
    # -------------------------------------------------------

    def toggle_theme(self):
        self.current_theme = "light" if self.current_theme == "dark" else "dark"
        self.settings["theme"] = self.current_theme
        AppSettings.set_theme(self.current_theme.capitalize())  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
        save_settings(self.settings)
        self.apply_theme()

    def apply_theme(self):
        qss_file = Path(__file__).parent / "themes" / ("dark.qss" if self.current_theme == "dark" else "light.qss")
        try:
            self.setStyleSheet(qss_file.read_text(encoding="utf-8"))
        except FileNotFoundError:
            log.warning("QSS not found: %s", qss_file)
            self.setStyleSheet("")

    # chat list helpers (same logic as before, omitted for brevity)
    def refresh_chat_list(self):
        self.chat_list_widget.clear(); chats = load_chats()
        for chat in chats:
            item = QListWidgetItem(chat["title"]); item.setData(Qt.UserRole, chat); self.chat_list_widget.addItem(item)
            if chat["file"] == self.current_chat["file"]: self.chat_list_widget.setCurrentItem(item)

    def handle_chat_selection(self, item: QListWidgetItem):
        self.switch_chat(item.data(Qt.UserRole))

    def create_and_switch_chat(self):
        new_chat = create_new_chat(); self.switch_chat(new_chat); self.refresh_chat_list()

    def switch_chat(self, chat: dict):
        self.current_chat = chat; set_current_chat(os.path.join("../chat_data", chat["file"]))
        self.chat_history = load_history();
        while self.chat_layout.count() > 1:
            item = self.chat_layout.takeAt(0)
            item.widget().deleteLater()

        for m in self.chat_history:
            self._add_bubble(m["role"], m["content"])
        self.refresh_gallery()

    def _add_bubble(self, role: str, text: str, avatar_path: str | None = None):
        if avatar_path is None:
            avatar_path = USER_AVA if role == "user" else AI_AVA
        avatar = QPixmap(avatar_path) if avatar_path else None
        bubble = MessageBubble(text, role, avatar)

        # –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ stretch‚Äë–∑–∞–≥–ª—É—à–∫–æ–π (‚Äë1)
        self.chat_layout.insertWidget(self.chat_layout.count() - 1, bubble)
        QTimer.singleShot(0, lambda: self.scroll.verticalScrollBar().setValue(
            self.scroll.verticalScrollBar().maximum()))
        return bubble

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Plugin runner
    # -------------------------------------------------------

    def run_plugin(self, plugin):
        if not self.selected_gallery_image:
            QMessageBox.warning(self, "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥–∞–ª–µ—Ä–µ–µ.")
            return

        try:
            # ‚ûä –°–ø–µ—Ä–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –ø–ª–∞–≥–∏–Ω –∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
            kwargs = {}
            if hasattr(plugin, "configure"):
                cfg = plugin.configure(self, self.selected_gallery_image)
                if cfg is None:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Cancel
                    return
                kwargs.update(cfg)

            # ‚ûã –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            new_path = plugin.process(self.selected_gallery_image, **kwargs)

            # ‚ûå –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            append_message(self.chat_history, "assistant",
                           f"[{plugin.display_name} applied]", image=new_path)
            save_history(self.chat_history)
            self.refresh_gallery()

        except Exception as exc:
            QMessageBox.critical(self, "Plugin error", str(exc))


    def on_model_changed(self, name: str):
        set_current_model(name)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Settings dialog
    # -------------------------------------------------------
    def open_settings(self):
        dlg = SettingsDialog(self)
        if dlg.exec_() == QDialog.Accepted:
            # –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.current_theme = AppSettings.theme().lower()
            self.apply_theme()

            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª –∫–∞—Ç–∞–ª–æ–≥ chat_data,
            # –ø–µ—Ä–µ—á–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
            self.refresh_chat_list()
            self.refresh_gallery()